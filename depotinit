# $_REPL->load_plugin('DumpHistory');

use Cwd;
use Dist::Zilla;
use Dist::Zilla::Tester;
use Path::Class;
use IO::All;

# # build fake repository
# my $zilla = Dist::Zilla::Tester->from_config({
#   dist_root => dir(qw(t check)),
# });

use SVK; use SVK::XD;

# chdir $zilla->tempdir->subdir('source');
# mkdir 'svk_depot';
my $depot = getcwd . '/svk_depot_1';
my $output;
my $xd = SVK::XD->new;
$xd->_create_depot( $depot );
my $svk = SVK->new (xd => $xd, output => \$output);
$svk->depotmap( '/dzil/', $depot );
$svk->ignore( 'svk_depot' );
$svk->commit( '-m', 'ignore repo in working copy!' );

$svk->mkdir('/dzil/project', '-m', 'project' );
$svk->mkdir('/dzil/project/trunk', '-m', 'trunk!' );
$svk->mkdir('/dzil/project/tags', '-m', 'tags!' );

$svk->checkout('/dzil/project/trunk', './project');
# io('./project/thing')->print("something\n");
# $svk->add('./project/thing');
# # $svk->commit( '-m', 'thing', './project/thing' );

$svk->mkdir('/dzil/project/trunk/change', '-m', 'trunk change!' );
my ( undef, $branch, undef, $cinfo, undef ) = 
	$xd->find_repos_from_co( './project', undef );
my $depotpath = $cinfo->{depotpath};
my $firstpart = qr|^/(.*?)/|;
( my $depotname = $depotpath ) =~ s|$firstpart.*$|$1|;
( my $project = $branch ) =~ s|$firstpart.*$|$1|;
$svk->copy("/$depotname/$branch", "/$depotname/$project/tags/v1", '-m', 'Tagging v1');
